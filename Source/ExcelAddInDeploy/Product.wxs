
<!-- TODO: 
* Go through the .wxl file and set the values for ProductNameNoSpace, ProductName, ProductDescription, ProductManufacturer, and ProductVersion.
* Go through the .wixproj file to set the paths to the AddIn project (AddinPublishDir).
* Create new Guids for the ProductUpgradeCode, XLL32ComponentGuid, and XLL64ComponentGuid.
  - Make sure ProductUpgradeCode is stable for upgrades of this product. 
  - Also generate new GUIDs for XLL32ComponentGuid and XLL64ComponentGuid when you copy this template for a new add-in.
* (The AddinFileNamexxx filenames below are those in the 'publish' directory under the AddinPublishDir (a location defined in the .wixproj)).
-->
<?define ProductVersion = "1.0.1"?>
<?define ProductUpgradeCode = "{697DC734-59CD-43DB-BD0B-959CB783527F}"?>
<?define XLL32ComponentGuid = "{2CC3F937-28C6-4D97-B335-F5724DC782E7}" ?>
<?define XLL64ComponentGuid = "{B3E718B0-ED91-4E4C-B1B3-4F651C2CBB97}" ?>
<?define AddinFileName32 = "Test-AddIn-packed.xll"?>
<?define AddinFileName64 = "Test-AddIn64-packed.xll"?>

<!-- This just checks that the above GUid was really changed -->
<?if $(var.ProductUpgradeCode) = "{697DC734-59CD-43DB-BD0B-959CB783527F}" ?>
<!--<?error The ProductUpgradeCode is still the template GUID. Generate a new one! ?>-->
<?endif ?>

<!-- These definitions are derived from entries in the .wxl file 
     These are the add-in names as they will be installed on disk and mentioned in the registry.
-->
<?define XLLFileName32 = "!(loc.ProductNameNoSpace)32.xll" ?>
<?define XLLFileName64 = "!(loc.ProductNameNoSpace)64.xll" ?>

<Wix xmlns="http://wixtoolset.org/schemas/v4/wxs" xmlns:netfx="http://wixtoolset.org/schemas/v4/wxs/netfx" xmlns:ui="http://wixtoolset.org/schemas/v4/wxs/ui">
  <Package Name="!(loc.ProductName)" Language="!(loc.LANG)" Version="$(var.ProductVersion)" Manufacturer="!(loc.ProductManufacturer)" UpgradeCode="$(var.ProductUpgradeCode)" InstallerVersion="200" Scope="perUser">
    <SummaryInformation Manufacturer="!(loc.ProductManufacturer)" Description="!(loc.ProductDescription)" />
    
    <MediaTemplate EmbedCab="yes" />
    <MajorUpgrade Schedule="afterInstallInitialize" DowngradeErrorMessage="A newer version of [ProductName] is already installed." AllowSameVersionUpgrades="no" />

    <WixVariable Id="WixUIBannerBmp" Value="Resources\Banner.jpg" />
    <WixVariable Id="WixUIDialogBmp" Value="Resources\Dialog.jpg" />
    <WixVariable Id="WixUILicenseRtf" Value="Resources\EULA.rtf" />


    <!-- ICONS -->
    <Icon Id="ProductIcon" SourceFile="Resources\Icon.ico" />
    <Property Id="ARPPRODUCTICON" Value="ProductIcon" />

    <!-- Windows Installer set TARGETDIR to the local hard drive with the most free space.  The top-level Directory must be Id="TARGETDIR" Name="SourceDir" -->
    

    <!-- There must be a feature in the project and all components must be installed into the feature to be installed. -->
    <Feature Id="ExcelAddIn" Title="!(loc.ProductName)" Description="!(loc.ProductDescription)" Level="1" AllowAdvertise="no">
      <ComponentGroupRef Id="XLLDistributables" />
      <ComponentGroupRef Id="ExtraDistributables" />
    </Feature>

    <PropertyRef Id="NETFRAMEWORK40CLIENT" />
    <Launch Condition="Installed OR NETFRAMEWORK40CLIENT" Message="[ProductName] requires .NET Framework 4.0." />
    <UI Id="UI">
       <!--See http://wix.sourceforge.net/manual-wix3/WixUI_index.htm for more information
       The following line adds the minimal WiX Dialog set to the install--> 
      <ui:WixUI Id="WixUI_Minimal" />
      <!-- This TextStyle is used in the CustonMessages.wxl file -->
      <TextStyle Id="Black10" FaceName="Tahoma" Size="10" Red="0" Green="0" Blue="0" Bold="yes" />
    </UI>
    <!--IMPORTANT ALL MS OFFICE SUPPORTED VERSIONS ARE HERE: Office 2003, 2007, 2010, 2013, 2016 Keep it uptodate-->
    <!-- these numbers will be parsed individually in the custom actions with InvariantCulture and NumberStyles.Any -->
    <Property Id="OFFICEREGKEYS" Value="11.0,12.0,14.0,15.0,16.0" />
    <Property Id="XLL32" Value="$(var.XLLFileName32)" />
    <Property Id="XLL64" Value="$(var.XLLFileName64)" />
    
    <!-- The property below will disable the repair button. -->
    <!--<Property Id="ARPNOREPAIR" Value="yes" />-->
    <Property Id="PromptToCloseProcesses" Value="EXCEL" />
    <Property Id="PromptToCloseDisplayNames" Value="Microsoft Excel" />
    
    <!--
    To handle registering the XLL, a custom action project must be created and a project reference must be created. 
    This project will create a DLL that WiX can understand.
    The binary refers to the dll created by the custom action project.
    If values are to be passed to the custom action project, the set property actions must precede the action specifying the DLL entry point.
    The InstallExecuteSequence specifies the sequence to run the actions and the AdminExecuteSequence provide rights to non-admin users (to the registry).
    For more information on custom actions, read
    http://www.codeproject.com/Articles/132918/Creating-Custom-Action-for-WIX-Written-in-Managed?fid=1599130&df=90&mpp=25&noise=3&prof=False&sort=Position&view=Quick&spc=Relaxed&select=4131367&fr=1#xx0xx
    -->
    
    <Binary Id="InstallerCA.CA.dll" SourceFile="$(var.InstallerCA.TargetDir)$(var.InstallerCA.TargetName).CA.dll" />
    <CustomAction Id="Action_RegisterAddIn.SetProperty" Return="check" Property="Action_RegisterAddIn" Value="OFFICEREGKEYS=[OFFICEREGKEYS];XLL32=[XLL32];XLL64=[XLL64]" />
    <CustomAction Id="Action_RegisterAddIn" DllEntry="CaRegisterAddIn" Return="check" Execute="immediate" BinaryRef="InstallerCA.CA.dll"/>
    <CustomAction Id="Action_UnRegisterAddIn.SetProperty" Return="check" Property="Action_UnRegisterAddIn" Value="OFFICEREGKEYS=[OFFICEREGKEYS];XLL32=[XLL32];XLL64=[XLL64]" />
    <CustomAction Id="Action_UnRegisterAddIn" DllEntry="CaUnRegisterAddIn" Return="check" Execute="immediate" BinaryRef="InstallerCA.CA.dll" />
    <CustomAction Id="Action_CloseAppsPrompt" DllEntry="ClosePrompt" Return="check" BinaryRef="InstallerCA.CA.dll" />
    <InstallExecuteSequence>
      <Custom Action="Action_CloseAppsPrompt" After="Action_RegisterAddIn.SetProperty" />
      <Custom Action="Action_RegisterAddIn.SetProperty" Before="Action_RegisterAddIn" Condition="NOT Installed OR REINSTALL" />
      <Custom Action="Action_RegisterAddIn" Before="InstallFinalize" Condition="NOT Installed OR REINSTALL" />
      <Custom Action="Action_UnRegisterAddIn.SetProperty" Before="Action_UnRegisterAddIn" Condition="Installed AND NOT UPGRADINGPRODUCTCODE" />
      <Custom Action="Action_UnRegisterAddIn" Before="InstallFinalize" Condition="Installed AND NOT UPGRADINGPRODUCTCODE" />
    </InstallExecuteSequence>
    <AdminExecuteSequence>
      <Custom Action="Action_CloseAppsPrompt" After="Action_RegisterAddIn.SetProperty" />
      <Custom Action="Action_RegisterAddIn.SetProperty" Before="InstallFinalize" Condition="NOT Installed OR REINSTALL" />
      <Custom Action="Action_RegisterAddIn" After="Action_RegisterAddIn.SetProperty" Condition="NOT Installed OR REINSTALL" />
      <Custom Action="Action_UnRegisterAddIn.SetProperty" Before="InstallFinalize" Condition="Installed AND NOT UPGRADINGPRODUCTCODE" />
      <Custom Action="Action_UnRegisterAddIn" After="Action_UnRegisterAddIn.SetProperty" Condition="Installed AND NOT UPGRADINGPRODUCTCODE" />
    </AdminExecuteSequence>

  
      <StandardDirectory Id="ProgramFilesFolder">
        <Directory Id="COMPANYDIR" Name="!(loc.ProductManufacturer)" />
      </StandardDirectory>
      <!-- We're doing per-user install into the AppData\Roaming folder 
           Change the next line from "AppDataFolder to LocalAppDataFolder" to install into AppData\Local.
      -->
      <StandardDirectory Id="AppDataFolder">
        <Directory Id="COMPANYAPPDATADIR" Name="!(loc.ProductManufacturer)">
          <!-- !! THIS ID IS USED IN THE CUSTOM ACTION SO DO NOT CHANGE IT -->
          <Directory Id="AddinFolder" Name="!(loc.ProductName)">
          </Directory>
        </Directory>
      </StandardDirectory>
    </Package>

  <Fragment>
    <!-- 
    Components always have unique GUIDs so that Windows can track every file installed. This information is stored in the registry.
    Components should only contain a single file. KeyPath files will be replaced if missing by the repair button on the installer.
    -->
    <ComponentGroup Id="XLLDistributables">
      
      <Component Id="XLL32" Guid="$(var.XLL32ComponentGuid)" Directory="AddinFolder">
        <RegistryValue Root="HKCU" Key="Software\!(loc.ProductManufacturer)\!(loc.ProductNameNoSpace)" Name="Xll32Bit" Value="AddIns" KeyPath="yes" Type="string" />

        <File Id="EXCELXLL32PACKED.XLL" Name="$(var.XLLFileName32)" Source="$(var.AddinPublishDir)\$(var.AddinFileName32)">
          <netfx:NativeImage Id="ngen_32Xll" Platform="32bit" Priority="0" />
        </File>
      </Component>
      
      <Component Id="XLL64" Guid="$(var.XLL64ComponentGuid)" Directory="AddinFolder">
        <RegistryValue Root="HKCU" Key="Software\!(loc.ProductManufacturer)\!(loc.ProductNameNoSpace)" Name="Xll64Bit" Value="AddIns" KeyPath="yes" Type="string" />
        
        <File Id="EXCELXLL64PACKED.XLL" Name="$(var.XLLFileName64)" Source="$(var.AddinPublishDir)\$(var.AddinFileName64)">
          <netfx:NativeImage Id="ngen_64Xll" Platform="64bit" Priority="0" />
        </File>
        
        <RemoveFile On="uninstall" Id="XLL32" Directory="AddinFolder" Name="$(var.XLLFileName32)" />
        <RemoveFile On="uninstall" Id="XLL64" Directory="AddinFolder" Name="$(var.XLLFileName64)" />
        <RemoveFolder Id="AddinFolderRemove" Directory="AddinFolder" On="uninstall" />
        <RemoveFolder Id="COMPANYAPPDATADIRRemove" Directory="COMPANYAPPDATADIR" On="uninstall" />
      </Component>
    </ComponentGroup>
  </Fragment>
  
</Wix>
